package org.aidan;

/**
 * 在Java中一种更好的单例实现方式
 * 有高人想到了这样一个解决方案：Lazy initialization holder class模式
 * 这个模式综合使用了Java的类级内部类和多线程缺省同步锁的知识，
 * 很巧妙地实现了延迟加载和线程安全
 * <p>
 * 相应的基础知识
 * 1 类级内部类
 * 即静态内部类，与外部类相关，与外部类实例无关
 * 类级内部类中可定义静态方法，在静态方法中只能够引用外部类中的静态成员方法或者成员变量
 * 类级内部类相当于其外部类的成员，只有在第一次被使用时才会被装载
 * 2 缺省同步锁
 * 在多线程开发中，主要使用synchronized来加互斥锁进行同步控制。
 * 但是在某些情况下JVM已经隐含地为您执行了同步，这些情况就不用自已再来进行同步控制了：
 * a.由静态初始化器初始化数据时（在表态字段上 或 static{}块中的初始化器）
 * b.访问final字段时
 * c.在创建线程之前创建对象时
 * d.线程可以看见它将要处理的对象时
 * <p/>
 */